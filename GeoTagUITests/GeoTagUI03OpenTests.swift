//
// Copyright 2024 Marco S Hyman
// See LICENSE file for info
// https://www.snafu.org/
//

import XCTest

final class GeoTagUI03OpenTests: XCTestCase {

    private var app: XCUIApplication!
    private var testImageFolder = ""

    override func setUpWithError() throws {
        continueAfterFailure = false
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the
        // invocation of each test method in the class.
        try super.tearDownWithError()
        app = nil
    }

    @MainActor
    func localSetup() {
        app = XCUIApplication()

        app.launch()
        sleep(2)

        // remove the "no backups sheet" sheet if it is present.
        let sheet = app.windows.sheets.element
        if sheet.exists {
            sheet.buttons.firstMatch.click()
        }

        let showDisabledFiles = app.menuItems["Show Disabled Files"]
        if showDisabledFiles.exists {
            showDisabledFiles.click()
            XCTAssert(app.menuItems["Hide Disabled Files"].waitForExistence(timeout: 2))
        }

        if let imagePath = ProcessInfo.processInfo.environment["ImagePath"] {
            testImageFolder = imagePath
        }
    }

    @MainActor
    func takeScreenshot(name: String) {
        let screenshot = app.windows.firstMatch.screenshot()

        let attachment =
        XCTAttachment(uniformTypeIdentifier: "public.png",
                      name: "\(name).png",
                      payload: screenshot.pngRepresentation,
                      userInfo: nil)
        attachment.lifetime = .keepAlways
        add(attachment)
    }

    @MainActor
    func test0OpenFiles() {
        localSetup()
        app.menuItems["Open…"].click()
        app.typeKey("g", modifierFlags: [.shift, .command])
        app.typeText(testImageFolder)
        app.typeKey(.enter, modifierFlags: [])
        app.typeKey(.enter, modifierFlags: [])
        XCTAssertTrue(app.windows.sheets.element.waitForExistence(timeout: 2))
        app.sheets.buttons.firstMatch.click()

        XCTAssertTrue(app.outlineRows.firstMatch
                         .staticTexts["image.foo"].exists)
        XCTAssertTrue(app.outlineRows.element(boundBy: 1)
                         .staticTexts["IMG_7158.CR2*"].exists)
        XCTAssertTrue(app.outlineRows.element(boundBy: 1)
                         .staticTexts["2015:11:12 13:06:56"].exists)
        XCTAssertTrue(app.outlineRows.element(boundBy: 16)
                         .staticTexts["P1000686.JPG"].exists)

        // select all
        app.typeKey("a", modifierFlags: [.command])
        XCTAssertTrue(app.outlineRows.element(boundBy: 0).isSelected)
        XCTAssertTrue(app.outlineRows.element(boundBy: 17).isSelected)

        // Assign locations
        app.typeKey("l", modifierFlags: [.command])
        sleep(1)
        XCTAssertFalse(app.outlineRows.firstMatch
                          .staticTexts.element(boundBy: 1).exists)
        XCTAssertTrue(app.outlineRows.element(boundBy: 1)
                         .staticTexts["38° 31' 15.88\" N"].exists)
        XCTAssertTrue(app.outlineRows.element(boundBy: 1)
                         .staticTexts["123° 12' 1.24\" W"].exists)
        XCTAssertFalse(app.outlineRows.element(boundBy: 16)
                          .staticTexts.element(boundBy: 2).exists)

        // hide disabled images
        app.typeKey("d", modifierFlags: [.command])
        XCTAssertTrue(app.outlineRows.element(boundBy: 0)
                         .staticTexts["IMG_7158.CR2*"].exists)
        XCTAssertFalse(app.outlineRows.element(boundBy: 15).exists)

        // select an image and take a screenshot
        app.staticTexts["P1000658.JPG"].click()
        sleep(1)
        takeScreenshot(name: "Locations")

        // discard changes
        XCTAssertTrue(app.menuItems["Discard changes"].isEnabled)
        app.menuItems["Discard changes"].click()
        XCTAssertTrue(app.sheets.buttons["Cancel"].waitForExistence(timeout: 2))
        app.sheets.buttons["Cancel"].click()
        XCTAssertTrue(app.menuItems["Discard changes"].isEnabled)
        app.menuItems["Discard changes"].click()
        XCTAssertTrue(app.sheets.buttons["I'm sure"].waitForExistence(timeout: 2))
        app.sheets.buttons["I'm sure"].click()
        XCTAssertFalse(app.outlineRows.element(boundBy: 0)
                          .staticTexts["38° 31' 15.88\" N"].exists)

        // clear image list
        app.typeKey("k", modifierFlags: [.command])
        XCTAssertFalse(app.outlineRows.element(boundBy: 0).exists)
    }
}
